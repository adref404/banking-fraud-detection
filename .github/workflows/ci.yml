name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # ===== JOB 1: Validación de Python Backend =====
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          cd backend
          pip install -r requirements.txt || echo "requirements.txt not ready yet"
          pip install pytest pytest-cov flake8 black

      - name: Linting with flake8
        run: |
          cd backend
          flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics || true

      - name: Check code formatting
        run: |
          cd backend
          black --check app/ || true

      - name: Run tests
        run: |
          cd backend
          pytest tests/ --cov=app --cov-report=xml || echo "No tests yet"

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        if: success()
        with:
          file: ./backend/coverage.xml
          flags: backend
          fail_ci_if_error: false

  # ===== JOB 2: Validación de Frontend =====
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci || echo "package.json not ready yet"

      - name: Linting
        run: |
          cd frontend
          npm run lint || true

      - name: Run tests
        run: |
          cd frontend
          npm test -- --coverage || echo "No tests yet"

      - name: Build
        run: |
          cd frontend
          npm run build || echo "Build not configured yet"

  # ===== JOB 3: Docker Build Test =====
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Test Docker Compose
        run: |
          docker-compose config || echo "docker-compose.yml not ready yet"

  # ===== JOB 4: Security Scan =====
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # ===== JOB 5: Documentation Check =====
  docs-check:
    name: Documentation Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check required docs exist
        run: |
          test -f README.md || echo "❌ README.md missing"
          test -f docs/setup-guide.md || echo "⚠️ setup-guide.md missing"
          test -f docs/architecture.md || echo "⚠️ architecture.md missing"
          echo "✅ Documentation check complete"
